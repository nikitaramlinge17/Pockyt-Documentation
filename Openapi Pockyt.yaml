openapi: 3.1.0
info:
  title: Pockyt Online Payments API's
  version: 0.1.0
  description: |-
    # Documentation
    ## Introduction
      
      Pockyt is a payment gateway utilized by various companies in retail and online to process payments, offering a digital wallet for seamless transfers and processing payments through point-of-sale systems, In-store payment, and Pay-out services.
   
    # Overview
      Pockyt API provides a powerful solution for integrating custom payment forms seamlessly into your website or application. By utilizing both client and server-side code the API enables the creation of a user friendly checkout form with all necessary payment elements included for the chosen payment method. This allows for a streamlined payment process making it easier for customers to complete transactions and for businesses to manage their payment processing.
   
    # Pockyt Checkout: API Workflow Diagram

      ![Pockyt Checkout](https://raw.githubusercontent.com/nikitaramlinge17/Pockyt-Documentation/main/assets/image1.png)

    # Quickstart Tutorial
   
      Pockyt offers a secure and user-friendly payment experience for customers, supporting a variety of payment methods such as digital wallets and card payments. Pockyt partners with multiple digital wallet providers, enabling businesses to attract and retain digital-native customers from all over the world. n endpoint. We recommend completing our quickstart tutorial on Pockyt products to learn key concepts. 
      1 - Hosted Pages
      2 - Digital Wallets 
      3 - Credit Card

      The same Please note that all the tutorials and explanations in this document will reference the Pockyt's base Sandbox URLs

      *  A Sandbox API's Base URL  "https://mapi.yuansfer.yunkeguan.com"
      *  Production API's Base URL's "https://mapi.yuansfer.com/"

    # Payment Methods

      Below are our payment integration methods, so you can choose what works best for you
   
      * Asia Pacific Based Digital Wallets Alipay, WeChatPay, UnionPay, TrueMoney, AliPay HK, TNG, GCash, Dana, KakaoPay, BKash, EasyPasia
      * US Based Payment Methods Major Credit Cards Visa, MasterCard, Discover, Amex, Union Pay, Digital Wallets Paypal, Venmo, CashApp
       
    # Payment Integration Types
      
      * **Online**: Online Payments enable e-wallet and payment acceptance, seamlessly integrated into your e-commerce and point-of-sale (POS) platforms. Refer the Documentation.
      * **In-store**: In-store payments enable clients to make hassle-free payments through their mobile wallets while maintaining operational efficiency in your stores. Refer the Documentation.
      * **Pay-out**: Effortlessly make payments to influencers, sellers, and contractors worldwide through their preferred payment methods, including digital wallets (such as PayPal and Alipay) and traditional bank accounts. Refer the Documentation
   
    # Prerequisites 
      
      Please ensure you have the following accounts and test devices available to complete your implementation project.	
      
      * Account ID's in the Apple iOS store, and Google Play store, with the iOS TestFlight application installed on your phone.
      * An iOS device and an Android device on which you will download and install the test digital wallet applications from PayPal, AliPay and CashApp to generate payment barcode strings

    # Guides
      
      In the Guides section, developers can find comprehensive documentation and detailed explanations of the API's functionality.
    
    ## Getting Started with Online Payment APIs
      Our Online digital wallet payment processing APIs help you to understand technical concepts and provide step-by-step tutorials for implementing them.
    
    # Pockyt Developement Sandbox
      High level steps
      
      * STEP 1 - Setting up a development account with Pockyt.
      * STEP 2 - Obtaining  API credentials.
        
      For Obtaining API credentails, you need two sets of credentials from Pockyt to complete your implementation project.
          
    ## Step 1 - Sandbox API Credentials and Account Information
        
      Enables you to test the entire transaction network relevant to your use cases.
      
      Perform the following steps to obtain your Sandbox API credentials:
        
        1 Visit the Pockyt developer's website and go to the Support tab.
        2 Click "Developer Tools" and go to the Sandbox Environment tab.
        3 Click the "Apply Sandbox Credentials" link to start the application process.
        4 Wait for the Pockyt team to review and approve your application (usually takes 2 days).
        5 Once approved, Pockyt will provide you with a dedicated secret token for the Sandbox environment.
        6 The base URL for the Sandbox environment API is "https://mapi.Pockyt.yunkeguan.com"
        7 Use the RESTful endpoints relevant to your use case with the initial calls made in test mode credentials to avoid incurring any costs.
        8 To ensure optimal integrations and testing, your Sandbox environment should feature the front-end user interface for online payment workflows.
        9 By following these steps, you can easily set up a Pockyt Sandbox account to test and refine your integration with Pockyt's API, providing a secure and user-friendly payment experience to your customers.
        
    ## Step 2 - Production API Credentials and Account Information
      Enables you to begin processing live transactions from digital wallets and other payment methods. 
        
      Perform the following steps to obtain your Production API credentials:
    
          1 Click Login and select Create Account to access the 10-step merchant application form.
          2 Enter your credentials and submit the required documents business license or registration voided check or bank letter with company name, and government-issued photo identification.          
          3 Pockyt's team reviews your application and submits it to each digital wallet service they work.
          4 Once approved, Pockyt automatically activates your live accounts, which takes around 1-2 business days for processing and approval.
          5 Pockyt notifies you of your approval status and provides your Merchant No. and Store No. via email.  
          6 Log in to your account to collect your API token, which is required to build API parameters.
          7 Each API request includes a verifySign parameter, which is the calculated MD5 hash value of your API token, allowing Pockyt to authenticate and authorize your API calls. For more information, visit "Signing API Parameters".
    
    ## Step 3 - Installing the test digital wallet applications.

    # Payment Scenarios and API Endpoints
    
      This section provides a step-by-step summary of the primary payment scenarios and explanations of the API endpoints relevant to each use case.
      
      The following are two use cases and implementation paths
      * Pockyt Checkout method** (referred to as the "SecurePay API") allows you to redirect customers to a Pockyt-hosted page for checkout. This is a favorable alternative payment solution if a business cannot host its payment forms for some reason.
      * Pockyt Integrated Option** (referred to as the "PrePay API")  is a more suitable option for businesses looking to customize their payment form and retain complete control over the latter. This method allows businesses/merchants to build their UI for all the payment methods preferred by their customers.
    
    # Implementation Option 1 - Checkout API
      
      Using the SecurePay API, merchant websites can send customers to receive payments from Pockyt.    
      
      Perform the following steps to use Pockyt Checkout for online payment checkout.
    
          1 The merchant system calls the create API to register a customer.
          2 The merchant system generates a customer ID for future transactions and stores it in its database.
          3 The merchant system then calls the secure-pay API to retrieve a cashierURL from Pockyt.
          4 Using the cashierURL, the customer is redirected to Pockyt's hosted payment form.
          5 After the payment is completed, Pockyt redirects the customer back to the merchant's payment result page using the provided callback URL in the request body of the secure-pay API.
          6 Pockyt relays the transaction results to the merchant's website using the IPN callback function.
          7 To receive the payment results, the merchant website creates an IPN listener page and uses its URL in the request body of the secure-pay API.
          8 The merchant's website displays the payment confirmation message to the customer.
    
    # Implementation Option 2 - Integrated Payments
    
      Pockyt Integrated Payments offers a highly customizable payment form for businesses that want to retain complete control over the payment process. 
      
      This method enables businesses to build their user interface for all preferred payment methods, providing a seamless payment experience for their customers.
      Merchants have the option to integrate Pockyt's APIs directly into their system for self-hosted mobile payments, or they can accept customer payments by integrating their system with Braintree, using both the /secure-pay API and the /process API. 
        
    # Pockyt Integrated Payments Workflow (Braintree)
      Integrating the merchant system with Braintree will allow your customers to utilize digital wallets such as Google Pay, Apple Pay, Paypal, and Venmo to make payments for purchases secured on your website.
      You can use Pockyt`s process API (discussed below) and/or secure-pay API (discussed earlier) to integrate with Braintree. 
      
      The first step is to create a Braintree account and then add the Braintree JavaScript SDK to the web page to accept payments and remain PCI-compliant.
      Soon after creating an account, the merchant system will receive a payment_method_nonce, which is a one-time-use reference ID for the payment method.
    
      **API Workflow for Merchants**:
    
      * The merchant system registers first-time customers by calling the create API, generating a customer number stored in the merchant's database for future reference.
      * When the customer is ready to make a payment, the merchant website displays its payment page and calls the secure-pay API with YIP as the terminal value.
      * The merchant system receives an authorization token and transaction ID instead of a cashier URL, which is required to accept payments with Braintree. 
      * Upon customer confirmation, the merchant system calls the process API to initiate the transaction.
      * Pockyt uses the payment_method_nonce and transaction ID to request that Braintree process the payment.
      *  Braintree complies with the request and passes the transaction results to Pockyt, who relays them back to the merchant website. 
    
      # Pockyt Integrated Payments: Process + SecurePay API Workflow Diagram
      ![Process + Securepay API](https://raw.githubusercontent.com/nikitaramlinge17/Pockyt-Documentation/main/assets/image2.png)
    
    # PrePay for In-App and Wechat Mini Solutions
      Pockyt Prepare API enables merchants systems to accept mobile via- In App and Wechat Mini Programs solutions. It is important to note that this API does not support credit card payments. 
      Our suite of software developement tools provides easy prepay API intrgrations for iOs and Andriod, supporting several programming langauges, including but not limited to Java, JavaScript, and C.
      
      **Use Case Flow**:
      * The merchant's system must begin by calling the create API to register first-time customers.
      * This will generate a customer id. that the merchant can store for future transactions.
      * When the customer is ready to make the payment, the merchant website will display its own payment page where the customer can indicate their preferred payment method.
      * Once the customer confirms the payment method, the merchant`s website passes the payment request to Pockyt for processing using the prepay API. 
      * The payment request should include the necessary parameters listed below.
      * Pockyt will advance the request to the digital wallet server that will process the payment and notify Pockyt about the transaction details.
      * Pockyt will then relay the results to the merchant`s system.

      # Pockyt Integrated Payments: Prepay API Workflow Diagram
      ![Prepay API](https://raw.githubusercontent.com/nikitaramlinge17/Pockyt-Documentation/main/assets/image3.png)
    
    # Customer Refunds
    In the instance where a customer requests a refund, the following request and response objects are initiated to complete the refund workflow.

    ## Refund API Workflow
      * The customer will apply for a refund on the merchant`s website using the transaction number.
      * The merchant`s system will use the transaction number to identify the exact details of the original purchase and call refund API which will request the digital wallet server to refund the payment originally made by the customer.
      * The wallet server will reimburse the transaction amount to the customer as well as alert the latter about the refund via a notification.
       
      ![Refund API](https://raw.githubusercontent.com/nikitaramlinge17/Pockyt-Documentation/main/assets/image4.png) 

    # Cancel the transaction / void
      In the event of a customer canceling the purchase the following request and response objects are created to complete the cancellation process successfully.
    
    ## Cancel API Workflow 
      * The customer applies for payment on the merchant's website after shopping.
      * If the customer is unable to confirm payment due to connectivity issues, they can select the **cancel** option in the payment UI.
      * The merchant's system calls Pockyt's /cancel API to cancel the payment transaction.
      * Pockyt notifies the digital wallet server to abandon the transaction.
      * The digital wallet server cancels the transaction and notifies Pockyt of the cancellation status.
      * Pockyt relays the information to the merchant's system.

      ![Cancel API](https://raw.githubusercontent.com/nikitaramlinge17/Pockyt-Documentation/main/assets/image5.png)
    
    # Recurring Payments (Auto Debit)
    Recurring Payments is known as auto-debit, it is a payment solution recommended by Pockyt that facilitates users with automated payments in the future.
    
    Auto Debit prevents the merchant from having to repeat the entire payment protocol every time a customer makes a purchase. Instead, the merchant can directly deduct money from the customer`s account using an authorization token.

    For the merchant to avail Auto Debit Payment feature, the user will have to sign an agreement, like a three-party withholding agreement, with the merchant in advance. This will authorize the merchant to obtain a token (known as an authorization token) that they can use to initiate any auto payment request made by the customer.

    API Endpoints in Recurring Payments (Auto Debit)
    * Consult
    * Apply token 
    * Pay 
    * Revovke

    ## Recurring Payments API Workflow:
    
      * Create a vendor list page that includes vendors supported by Pockyt.
      * Call the consult API to retrieve an authorization URL that redirects the customer to a vendor`s interface to authorize the merchant for future payments.
      * Based on the terminal value, Pockyt will provide either a normalURL or applinkURL and generate an autoDebitNo. unique to the Pockyt system.
      * The customer will authorize the merchant to deduct payments from their wallet via the vendor's interface.
      * The vendor will redirect the customer back to a redirection URL (autoRedirectURL) provided by the merchant in the request body of the consult API along with passing the authorization result to it.
      * Call the apply-token API using the autoDebitNo. in the request parameter to get the token from the vendor.
      * Use the pay API, following a fixed schedule, to initiate an auto-debit payment for any purchase made and process the payment results based on the transaction status returned by Pockyt.
      * Use the revoke API to cancel the authorization agreement if the customer requests it.
      * Once Pockyt receives the revoke request, the access token will become invalid, and the merchant system will be unable to access the user resource scope.

    # Apendix B: Tutorial: Calculate VeriSign Value

    ## Secure API Calls with VeriSign Signature
    Transactions made via Pockyt do not involve any secret tokens or user passwords eliminating the chances of hacking or fraud incidents. Instead, we use the verifySign parameter to authenticate and authorize the API requests at every step of the transaction process.
    The verifySign parameter serves as your API parameter signature. You can build this parameter by retrieving the API token from Pockyt`s dashboard and using the latter along with MD5 encryption to calculate the MD5 authentication hash value.

    Follow these best practices to make sure your API token is safe.
    
    * Store your API token in a secure location, such as a database or configuration file on the backend of the application, and restrict access to only those who need them. Do not har-code the token into your code or include it in version control.
    * Use secure encryption algorithms: Use encryption algorithms like AES or RSA to encrypt your API token before storing it. This helps protect against unauthorized access to the token.
    * Implement rate limiting: Implement rate limiting to prevent attackers from launching brute force attacks against your API. This helps protect against attempts to guess valid tokens.
    * Monitor logs: Regularly monitor logs for any suspicious activity, such as multiple failed API access attempts or requests with invalid tokens, and take action if necessary.
    *
    These best practices will help you secure your API token and ensure the security of your system.

    **Follow the steps below to implement the VeriSign feature**

    1 Sort the parameters alphabetically according to the parameter name.
    2 Concatenate the parameter names and values using '=' and '&' characters.
    3 Append the MD5 hash value of your API token to the end of your parameters with the '&'prefix.
    4 Calculate the MD5 hash value of the Step 3 result.

    # Appendix C:Tutorial: Instant Payment Notifications

      The Instant Payment Notification (IPNurl) is a callback function that helps Pockyt notify the merchant about any new transaction-related event. Pockyt waits for the merchant`s website to acknowledge the IPN messages before it can take action for further processing.

      Here is how to access Pockyt`s IPN service.

      * Create an IPN listener page on your website. This listener page will contain a custom script or a program to receive back-end messages.
      * Include the URL of this listener page in the request body. This will allow you to receive all of the transaction-related event notifications sent by Pockyt to your website.
      * Every time a transaction occurs, Pockyt sends an instant payment notification (IPN) to the merchant`s listener page URL using the secure POST method.
      * The IPN listener page parses the transaction information and processes them to the custom script for verification.
      * After verifying the success status of these messages, the custom script or program will forward them to the back-end applications for processing.
      * At this point, the listener page must acknowledge Pockyt`s IPN messages with a “success” string.
      * Keep in mind that the IPN messages are not synchronous with the merchant`s website and there is always a chance for these notifications to get lost or delayed due to poor internet connectivity.

      Pockyt`s IPN service continues to resend the IPN messages until the listener page acknowledges. If the listener page fails to acknowledge the messages, it will continue to receive them up to eight times in two hours.


      **Callback parameters**

      It is recommended for the merchant system to validate the parameters in the callback information using verifySign. This is to eliminate the possibility of processing tampered information. Pockyt`s callback function will contain the following parameters along with the IPN.


  license:
    name: Pockyt
    url: https://mapi.Pockyt.yunkeguan.com

  contact: 
    name: API Team
    email: n@gwocu.com  
    url: https://gwocu.com/contact

tags:
  - name: API Reference
    description: Example Secure Pay operations.   

servers: 
  - url:  https://mapi.yuansfer.com
    description: Production
  - url:  https://mapi.yuansfer.yunkeguan.com
    description: Sandbox
components:
  schemas: 
    secure-pay:
      properties: 
        merchantNo:
          type: integer
        storeNo:
          type: integer
        verifySign:
          type: string
        amount:
          type: integer
        currency:
          type: string
        settleCurrency:
          type: string
        vendor:
          type: string
        terminal:
          type: string
        timeout:
          type: integer
        reference:
          type: string
        ipnURL:
          type: string
        callbackUrl:
          type: string
        description:
          type: string
        note:
          type: string
        osType:
          type: string
        goodsInfo:
          type: object
  securitySchemes:
    api_keys:
      description: |
        Generate your secret API key in the app settings.
      name: secret-key
      type: apiKey
      in: header
    jwt:
      description: |
        Generate your JWT when you log in.
      type: http
      scheme: bearer
      bearerFormat: JWT  
paths:  
  /secure-pay:  
    post:
      summary: Secure payment
      description: Enables merchant websites to send customers to Pockyt for payment processing.
      operationId: secure-pay 
      deprecated: false
      tags: 
        -  API Reference
      parameters:
        - name: customerNo
          in: header
          description: (Optional) The user's ID in Pockyt System; include this parameter if you wish to map a customer with the payment and request a secure checkout.
          required: false
          schema: 
            type: string
        - name: merchantNo
          in: header
          description: (Required) A unique value created and assigned by Pockyt`s support team during the onboarding process
          required: true
          schema: 
            type: string
        - name: storeNo
          in: header
          description: (Required) A unique value created and assigned by Pockyt`s support team during the onboarding process.
          required: true         
          schema: 
            type: string
        - name: amount
          in: query
          description: The transaction amount
          required: true
          schema: 
            type: string
        - name: currency 
          in: header
          description: (Required) When the currency is "GBP", the settlement currency is "GBP". All other currencies settle with "USD
          required: true
          schema: 
            type: string
        - name: vendor 
          in: header
          description: (Required) The possible payment channels are "alipay","wechatpay", "paypal", "venmo", "unionpay", "creditcard","truemoney", "alipay_hk", "tng", "gcash", "dana", "kakaopay","bkash", "easypaisa","cashapppay"
          required: true
          schema: 
            type: string
        - name: ipUrl 
          in: header
          description: (Required) The asynchronous notification address. The IPN URL must be secure. For more information, visit the IPN section.    
          required: true
          schema: 
            type: string
        - name: callbackUrl 
          in: header
          description: (Required) The synchronous callback HTTP address to receive notification messages for events. The callback URL follows macro substitution rules like xxxcallback_url?trans_no= {amount}&amount={amount}. Then Pockyt automatically replaces the values of {} for a list of parameters.
          required: true
          schema: 
            type: string
        - name: reference 
          in: header
          description: (Required) The Invoice Number of the transaction in the merchant's system.  
          required: true
          schema: 
            type: string
        - name: terminal
          in: header
          description: (Required) The possible values are "ONLINE" for desktop/web app and "WAP" for mobile, YIP for Braintree.
          required: true
          schema: 
            type: string
        - name: description 
          in: header
          description: (Required) The description of the transaction will be displayed on the invoice.
          required: true
          schema: 
            type: string
        - name: note 
          in: header
          description: (Required) The payments notes
          required: true
          schema: 
            type: string
        - name: OsType 
          in: header
          description: (Required) Required when terminal is WAP or APP, the possible values are "IOS" and "ANDROID".
          required: true
          schema: 
            type: string
        - name: timeout 
          in: header
          description: (Required) The timeout in minutes. The default value is 120.
          required: true
          schema: 
            type: string
        - name: goodsInfo
          in: header
          description: (Required) JSON encoded string of an array of items that the customer purchases from the merchant; Special characters are not supported. e.g [{"goods_name":"name1","quantity":"quantity1"}, {"goods_name":"name2","quantity":"quantity2"}]
          required: true
          schema: 
            type: string
        - name: creditType
          in: header
          description: (Required) The payment type. This is only required when vendor = creditcard. The values are "normal" or "CIT". The default is "normal".
          required: true
          schema: 
            type: string
        - name: verifySign
          in: header
          description: Required- Required- the parameter signature. It is the calculated MD5 hash value of the API token used to encrypt the request message and authorize transaction requests. For more information, visit Signing API Parameters.
          required: true
          schema: 
            type: string
      security: 
        - api_keys: []
          jwt: []
      
      requestBody: 
        content: 
          application/json:
            schema: 
              $ref: "#/components/schemas/secure-pay"
      responses:
        200: # Response                   
          description: Returns a 200 status to indicate.....
          content: # Response Body
            application/json: # Media Type
              schema: 
                type: object # Data Type
                properties: 
                  id:
                    type: integer
                  message: 
                    type: string
                  result:
                    type: object
                example: # Sample Data              
        201:
          description: Returns a 201 status to indicate.....
          content: 
            text/plain:
              schema: 
                type: string 
                example: Error 
        403:
          description: Returns a 403 status to indicate.....
          content: 
            text/plain:
              schema: 
                type: string 
                example: Error
        401:
          description: Returns a 401 status to indicate.....
          content: 
            text/plain:
              schema: 
                type: string 
                example: Error
  /process:            
    post:
      summary: process
      description: Enables merchant systems to call  process API to initiate transaction.
      operationId: process 
      deprecated: false
      tags: 
        - API Reference
      parameters:
        - name: paymentMethodNonce
          in: header
          description: (Required) It is a one-time use reference ID of the payment method.
          required: true
          schema: 
           type: string
        - name: merchantNo
          in: header
          description: (Required) A unique value created and assigned by Pockyt`s support team during the onboarding process.
          required: true
          schema: 
           type: string
        - name: paymentmethod
          in: header
          description: (Required) Identifier of the wallet type being used.
          required: true
          schema: 
            type: string
        - name: storeNo
          in: header
          description: (Required) A unique value created and assigned by Pockyt's support team during the onboarding process.
          required: true
          schema: 
            type: string
        - name: transactionNo
          in: header
          description: (Required) The ID of the transaction stored in the Pockyt system.
          required: true
          schema: 
            type: string
        - name: verifySign
          in: header
          description: (Required) The parameter signature; used for authenticating and authorizing transaction requests.
          required: true
          schema: 
            type: string
      security: 
              - api_keys: []
                jwt: []
      requestBody: 
        content: 
          application/json:
            schema: 
              $ref: "#/components/schemas/secure-pay"
      responses:    
        200: # Response                   
          description: Returns a 200 status to indicate.....
          content: # Response Body
            application/json: # Media Type
              schema: 
                type: object # Data Type
                properties: 
                  id:
                    type: integer
                  message: 
                    type: string
                  result:
                    type: object
              example: # Sample Data 
        201:
          description: Returns a 201 status to indicate.....
          content: 
            text/plain:
              schema: 
                type: string 
                example: Error 
        403:
          description: Returns a 403 status to indicate.....
          content: 
            text/plain:
              schema: 
                type: string 
                example: Error
        401:
          description: Returns a 401 status to indicate.....
          content: 
            text/plain:
              schema: 
                type: string 
                example: Error
  /prepay:              
    post:
      summary: prepay
      description: Manages mobile payments via in-app or WeChat Mini Program solutions.
      operationId: prepay
      deprecated: false
      tags: 
        - API Reference
      parameters:
        - name: merchantNo
          in: header
          description: (Required) A unique value created and assigned by Pockyt's support team during the onboarding process.
          required: true
          schema: 
             type: string     
        - name: storeNo
          in: header
          description: (Required) A unique value created and assigned by Pockyt's support team during the onboarding process.
          required: true
          schema: 
            type: string  
        - name: Amount
          in: header
          description: (Required) The payment amount that the merchant requests to receive in currency order.
          required: true
          schema: 
            type: number  
        - name: currency
          in: header
          description: (Required) Support transaction currenices are "USD", "CNY".
          required: true
          schema: 
            type: number
        - name: settleCuurency
          in: header
          description: (Required) The Supported settlement currenices is "USD"
          required: true
          schema: 
            type: string
        - name: Vendor
          in: header
          description: (Required) possible payment channels "alipay" , wechatpay"
          required: true
          schema: 
            type: string
        - name: ipnUrl
          in: header
          description: (Required) The instant payment notification handler URL; the IPN URL must be secure.
          required: true
          schema: 
            type: string
        - name: Openid
          in: header
          description: (Required) when terminal='MINIPROGRAM' and vendor='wechatpay'
          required: true
          schema: 
            type: string
        - name: Reference
          in: header
          description: (Required) The invoice number in the merchant's system.
          required: true
          schema: 
            type: string
        - name: Terminal
          in: header
          description: (Required) The possible values are "MINIPROGRAM", "APP".
          required: true
          schema: 
            type: string
        - name: Description
          in: header
          description: (Optional) The description of transaction which will be displayed on the invoice.
          required: false
          schema: 
            type: string
        - name: Note
          in: header
          description: (Optional) The payment note
          required: false
          schema: 
            type: string    
        - name: Timeout
          in: header
          description: (Optional) The timeout in minutes. The default value is 120.
          required: false
          schema: 
            type: string    
        - name: verifySign  
          in: header
          description: (Optional) The parameter signature; used for authenticating and authorizing transaction requests.
          required: true
          schema: 
            type: string
      security: 
              - api_keys: []
                jwt: []
      requestBody: 
        content: 
          application/json:
            schema: 
              $ref: "#/components/schemas/secure-pay"
      responses:    
        200: # Response                   
          description: Returns a 200 status to indicate.....
          content: # Response Body
            application/json: # Media Type
              schema: 
                type: object # Data Type
                properties: 
                  id:
                    type: integer
                  message: 
                    type: string
                  result:
                    type: object
                example: # Sample Data 
        201:
          description: Returns a 201 status to indicate.....
          content: 
            text/plain:
              schema: 
                type: string 
                example: Error 
        403:
          description: Returns a 403 status to indicate.....
          content: 
            text/plain:
              schema: 
                type: string 
                example: Error
        401:
          description: Returns a 401 status to indicate.....
          content: 
            text/plain:
              schema: 
                type: string 
                example: Error
  /refund:
    post:
      summary: refund
      description: Enables merchant systems to refund  payments in ease of use.
      operationId: refund
      deprecated: false
      tags: 
        - API Reference
      parameters:
          - name: merchantNo
            in: header
            description: (Required) The merchant's ID
            required: true
            schema: 
               type: string     
          - name: storeNo
            in: header
            description: (Required) The store's ID 
            required: true
            schema: 
              type: string  
          - name: refundAmount
            in: header
            description: (Required) The amount that needs to be refunded 
            required: true
            schema: 
              type: string 
          - name: currency
            in: header
            description: (Required)The supported settlement currency "USD".
            required: true
            schema: 
              type: number
          - name: settleCuurency
            in: header
            description: (Required)The supported settlement currency "USD".
            required: true
            schema: 
              type: number
          - name: transactionNo
            in: header
            description: Required Transaction number of orginal sale.
            required: true
            schema: 
              type: string
          - name: reference
            in: header
            description: (Required) reference number of original sale.
            required: true
            schema: 
              type: string
          - name: refundReference 
            in: header
            description: (Optional) ID of reference transaction in Point-of-sale.
            required: false
            schema: 
              type: string
          - name: verifySign
            in: header
            description: (Required) the parameter signature.
            required: true
            schema: 
              type: string
      security: 
                - api_keys: []
                  jwt: []
      requestBody: 
        content: 
          application/json:
            schema: 
              $ref: "#/components/schemas/secure-pay"  
      responses:    
        200: # Response                   
          description: Returns a 200 status to indicate.....
          content: # Response Body
            application/json: # Media Type
              schema: 
                type: object # Data Type
                properties: 
                  id:
                    type: integer
                  message: 
                    type: string
                  result:
                    type: object
                example: # Sample Data 
        201:
          description: Returns a 201 status to indicate.....
          content: 
            text/plain:
              schema: 
                type: string 
                example: Error 
        403:
         description: Returns a 403 status to indicate.....
         content: 
            text/plain:
              schema: 
                type: string 
                example: Error
        401:
          description: Returns a 401 status to indicate.....
          content: 
            text/plain:
              schema: 
                type: string 
                example: Error    
  /cancel:
    post:
      summary: cancel
      description: Enables customer to cancel the purchase. 
      operationId: cancel
      deprecated: false
      tags: 
        - API Reference   
      parameters:
        - name: merchantNo
          in: header
          description: (Required)- the merchant`s ID
          required: true
          schema: 
            type: string     
        - name: storeNo
          in: header
          description: (Required) the store ID
          required: true
          schema: 
            type: string  
        - name: transactionNo
          in: header
          description: (Required) Transaction number of original sale.
          required: true
          schema: 
            type: string       
        - name: reference 
          in: header
          description: (Required) reference number of orginial sale
          required: true
          schema: 
            type: number
        - name: VerifySign
          in: header
          description: (Required) - the paramter signature
          required: true
          schema: 
            type: string
      security: 
              - api_keys: []
                jwt: []
      requestBody: 
         content: 
           application/json:
             schema: 
               $ref: "#/components/schemas/secure-pay" 
               responses:    
               200: # Response                   
                 description: Returns a 200 status to indicate.....
                 content: # Response Body
                   application/json: # Media Type
                     schema: 
                       type: object # Data Type
                       properties: 
                         id:
                           type: integer
                         message: 
                           type: string
                         result:
                           type: object
                       example: # Sample Data 
               201:
                 description: Returns a 201 status to indicate.....
                 content: 
                   text/plain:
                     schema: 
                       type: string 
                       example: Error 
               403:
                description: Returns a 403 status to indicate.....
                content: 
                   text/plain:
                     schema: 
                       type: string 
                       example: Error
               401:
                 description: Returns a 401 status to indicate.....
                 content: 
                   text/plain:
                     schema: 
                       type: string 
                       example: Error    
  /consult:
    post:
      summary: consult
      description: Enables customer to cancel the purchase. 
      operationId: consult
      deprecated: false
      tags: 
        - API Reference   
      parameters:
        - name: vendor
          in: header
          description: The possible payment channels are "alipay", "truemoney", "alipay_hk","tng", "gcash", "dana", "kakaopay", "bkash", "easypaisa".
          required: true
          schema: 
            type: string     
        - name: merchantNo
          in: header
          description: (Required) A unique value created and assigned by Pockyt`s support team during the onboarding process
          required: true
          schema: 
            type: string  
        - name: storeNo
          in: header
          description: (Required) A unique value created and assigned by Pockyt`s support team during the onboarding process
          required: true
          schema: 
            type: string       
        - name: note
          in: header
          description: (Optional) The payment note.
          required: true
          schema: 
            type: number
        - name: osType
          in: header
          description: (Required) - the terminal is "WAP" or "APP", return this parameter.
          required: true
          schema: 
            type: string
        - name: osVersion
          in: header
          description: (Required) - the terminal is "WAP" or "APP", return this parameter.
          required: true
          schema: 
            type: string
        - name: autoIpnUrl
          in: header
          description: (Required) The asynchronous callback address Note If autoIpUrl is not null when the user authorization is complete, Pockyt will send an asynchronous callback notification containing parameters such as autoDebitNo, autoReference, vendor, time, note and verifySign
          required: true
          schema: 
            type: string
        - name: autoRedirectUrl
          in: header
          description: (Required) It synchronizes the callback address.
          required: true
          schema: 
            type: string
        - name: autoRefereence
          in: header
          description: (Required) The invoice number of the auto-debit in the merchant's system.
          required: true
          schema: 
            type: string
        - name: terminal
          in: header
          description: (Required) The possible values are " Online", "WAP", "APP".
          required: true
          schema: 
            type: string
        - name: verifySign
          in: header
          description: (Required) the calculated MD5 value used to encrypt the request message.
          required: true
          schema: 
            type: string
      security: 
               - api_keys: []
                 jwt: []
      requestBody: 
         content: 
            application/json:
              schema: 
                $ref: "#/components/schemas/secure-pay" 
                responses:    
                200: # Response                   
                description: Returns a 200 status to indicate.....
                content: # Response Body
                application/json: # Media Type
                  schema: 
                   type: object # Data Type
                   properties: 
                     id:
                       type: integer
                     message: 
                       type: string
                     result:
                       type: object
                  example: # Sample Data 
                201:
                  description: Returns a 201 status to indicate.....
                  content: 
                  text/plain:
                    schema: 
                    type: string 
                    example: Error 
                403:
                   description: Returns a 403 status to indicate.....
                   content: 
                   text/plain:
                   schema: 
                    type: string 
                    example: Error
                401:
                   description: Returns a 401 status to indicate.....
                   content: 
                   text/plain:
                   schema: 
                     type: string 
                     example: Error 
  /apply-token:
      post:
         summary: apply-token
         description: Enables you to obtain a new AccessToken or refresh your existing AccessToken. 
         operationId: apply-token
         deprecated: false
         tags: 
           - API Reference
         parameters:
          - name: merchantNo
            in: header
            description: Required - A unique value created and assigned by Pockyt`s support team during the onboarding process
            required: true
            schema: 
              type: string     
          - name: storeNo
            in: header
            description: Required - A unique value created and assigned by Pockyt`s support team during the onboarding process.
            required: true
            schema: 
              type: string  
          - name: autoDebitNo
            in: header
            description: Required - The auto-debit record ID generated by Pockyt.
            required: true
            schema: 
              type: string       
          - name: grantType
            in: header
            description: Required - Possible value are 'AUTHORIZATION_CODE','REFRESH_TOKEN'.
            required: true
            schema: 
              type: string
          - name: verifySign
            in: header
            description: (Required) the calculated MD5 value used to encrypt the request message
            required: true
            schema: 
              type: string
         security: 
                - api_keys: []
                  jwt: []
         requestBody: 
            content: 
                application/json:
                   schema: 
                      $ref: "#/components/schemas/secure-pay" 
                      responses:    
                      200: # Response                   
                      description: Returns a 200 status to indicate.....
                      content: # Response Body
                        application/json: # Media Type
                          schema: 
                          type: object # Data Type
                          properties: 
                            id:
                              type: integer
                          message: 
                            type: string
                          result:
                                type: object
                          example: # Sample Data 
                      201:
                         description: Returns a 201 status to indicate.....
                         content: 
                         text/plain:
                           schema: 
                             type: string 
                             example: Error 
                      403:
                          description: Returns a 403 status to indicate.....
                          content: 
                          text/plain:
                            schema: 
                               type: string 
                               example: Error
                      401:
                          description: Returns a 401 status to indicate.....
                          content: 
                          text/plain:
                            schema: 
                                type: string 
                                example: Error 
  /pay:
   post:
      summary: pay
      description: Enables you to to initiate a payment and process the results based on the status and operation instructions provided by Yuansfer, utilize this interface. Deductions will be made using  AccessToken. 
      operationId: pay
      deprecated: false
      tags: 
        - API Reference
      parameters:
        - name: merchantNo
          in: header
          description: Required - A unique value created and assigned by Pockyt`s support team during the onboarding process
          required: true
          schema: 
            type: string     
        - name: storeNo
          in: header
          description: Required - A unique value created and assigned by Pockyt`s support team during the onboarding process.
          required: true
          schema: 
            type: string  
        - name: autoDebitNo
          in: header
          description: Required - The auto-debit record ID generated by Pockyt.
          required: true
          schema: 
            type: string       
        - name: amount
          in: header
          description: ( Required ) The amount of transaction
          required: true
          schema: 
            type: string
        - name: currecncy
          in: header
          description: ( Required ) The amount of transaction
          required: true
          schema: 
            type: string
        - name: settleCurrency
          in: header
          description: ( Required ) The supported settlement currency is "USD".
          required: true
          schema: 
            type: string
        - name: reference
          in: header
          description: ( Required ) The Invoice Number of the transaction in the merchant's system.
          required: true
          schema: 
            type: string
        - name: inpnUrl
          in: header
          description: ( Required ) The asynchronous callback address
          required: true
          schema: 
            type: string
        - name: verifySign
          in: header
          description: (Required) the calculated MD5 value used to encrypt the request message
          required: true
          schema: 
            type: string
      security: 
              - api_keys: []
                jwt: []
      requestBody: 
         content: 
           application/json:
             schema: 
               $ref: "#/components/schemas/secure-pay" 
               responses:    
               200: # Response                   
                 description: Returns a 200 status to indicate.....
                 content: # Response Body
                   application/json: # Media Type
                     schema: 
                       type: object # Data Type
                       properties: 
                        id:
                           type: integer
                        message: 
                           type: string
                        result:
                           type: object
                       example: # Sample Data 
               201:
                  description: Returns a 201 status to indicate.....
                  content: 
                    text/plain:
                      schema: 
                        type: string 
                        example: Error 
               403:
                  description: Returns a 403 status to indicate.....
                  content: 
                    text/plain:
                      schema: 
                       type: string 
                       example: Error
               401:
                  description: Returns a 401 status to indicate.....
                  content: 
                    text/plain:
                    schema: 
                    type: string 
                    example: Error 
  /revoke:
      post:
        summary: revoke
        description: Enables you to  inititae the authoization verification URL for an authorization that occurs at Pockyt. It is used to authorize the user based on the information provided in the request, making it an essential part of the authorization process.
        operationId: revovke
        deprecated: false
        tags: 
          - API Reference
        parameters:
          - name: merchantNo
            in: header
            description: Required - A unique value created and assigned by Pockyt`s support team during the onboarding process
            required: true
            schema: 
              type: string
          - name: storeNo
            in: header
            description: Required - A unique value created and assigned by Pockyt`s support team during the onboarding process.
            required: true
            schema: 
              type: string  
          - name: autoDebitNo
            in: header
            description: Required - The auto-debit record ID generated by Pockyt.
            required: true
            schema: 
              type: string
          - name: verifySign
            in: header
            description: (Required) the calculated MD5 value used to encrypt the request message
            required: true
            schema: 
              type: string
        security: 
               - api_keys: []
                 jwt: []
        requestBody: 
            content: 
                    application/json:
                      schema: 
                        $ref: "#/components/schemas/secure-pay" 
                        responses:    
                        200: # Response                   
                          description: Returns a 200 status to indicate.....
                          content: # Response Body
                            application/json: # Media Type
                              schema: 
                                type: object # Data Type
                                properties: 
                                 id:
                                    type: integer
                                 message: 
                                    type: string
                                 result:
                                    type: object
                                example: # Sample Data
                        201:
                            description: Returns a 201 status to indicate.....
                            content: 
                              text/plain:
                              schema: 
                                type: string 
                                example: Error 
                        403:
                            description: Returns a 403 status to indicate.....
                            content: 
                              text/plain:
                              schema: 
                                type: string 
                                example: Error
                        401:
                            description: Returns a 401 status to indicate.....
                            content: 
                              text/plain:
                              schema: 
                                type: string 
                                example: Error 
  /transaction object:
      post:
        summary: transactionobject
        description: Write description
        operationId: transactionobject
        deprecated: false
        tags: 
          - API Reference
        parameters:
            - name: transactionNo
              in: header
              description: The transaction ID in the Yuansfer system.
              required: true
              schema: 
                type: string
            - name: reference
              in: header
              description: Invoice Number of transaction in the merchant's POS.
              required: true
              schema: 
                  type: string
            - name: orginalTransactionNo
              in: header
              description: The ID of the original transaction in the Pockyt system.
              required: true
              schema: 
                type: string
            - name: merchantNo
              in: header
              description: Merchant ID
              required: true
              schema: 
                type: string
            - name: storeNo
              in: header
              description: Store ID
              required: true
              schema: 
                type: string
            - name: storAdminNo
              in: header
              description: Store Admin ID
              required: true
              schema: 
                  type: string
            - name: amount
              in: header
              description: The transaction amount
              required: true
              schema: 
                type: number
            - name: refundAmount
              in: header
              description: The refund amount
              required: true
              schema: 
                type: number
            - name: voidAmount
              in: header
              description: The void or cancel amount.
              required: true
              schema: 
                  type: number
            - name: transactionType
              in: header
              description: The possible values are payment, refund, and void
              required: true
              schema: 
                      type: string
            - name: transactionStatus
              in: header
              description: The status of transaction
              required: true
              schema: 
                     type: string
            - name: currency
              in: header
              description: The supported transaction currency are "USD", "CNY", "PHP","IDR", "KRW", "HKD", "THB", "MYR", "GBP", "BDT", "PKR
              required: true
              schema: 
                     type: string
            - name: SettleCurrency
              in: header
              description: The supported settlement currency are "USD", "GBP".
              required: true
              schema: 
                     type: string
            - name: createTime
              in: header
              description: Format "yyy-MM-dd:mm:ss"
              required: true
              schema: 
                     type: string
            - name: PaymentTime
              in: header
              description: Format "yyy-MM-dd:mm:ss"
              required: true
              schema: 
                     type: string
            - name: vendor
              in: header
              description: The possible payment channels are "alipay", "wechatpay".
              required: true
              schema: 
                     type: string
        security: 
                  - api_keys: []
                    jwt: []